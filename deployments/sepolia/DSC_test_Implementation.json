{
  "address": "0xEd29e37f98dACb2273B6d0BBBD8f684d12452A3A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOfWithFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeChangeMinDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "feeLastPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setFeeCollectionAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee_",
          "type": "uint256"
        }
      ],
      "name": "setFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x99a03d95d731aa588a8b6866002db73d17a719d82493050d2d19070d50911e4e",
  "receipt": {
    "to": null,
    "from": "0x6317FbafcA5915d781410A8ABDFaF9057a54fe04",
    "contractAddress": "0xEd29e37f98dACb2273B6d0BBBD8f684d12452A3A",
    "transactionIndex": 46,
    "gasUsed": "2688987",
    "logsBloom": "0x00000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000800000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc3230b31b07c5cdc5adde9bc5a8bf5d659f0e6d0e0e13df0c55fe1514ebcc0eb",
    "transactionHash": "0x99a03d95d731aa588a8b6866002db73d17a719d82493050d2d19070d50911e4e",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 6465813,
        "transactionHash": "0x99a03d95d731aa588a8b6866002db73d17a719d82493050d2d19070d50911e4e",
        "address": "0xEd29e37f98dACb2273B6d0BBBD8f684d12452A3A",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 97,
        "blockHash": "0xc3230b31b07c5cdc5adde9bc5a8bf5d659f0e6d0e0e13df0c55fe1514ebcc0eb"
      }
    ],
    "blockNumber": 6465813,
    "cumulativeGasUsed": "13031046",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "df561dbabd68d7da5c1d213cd62dbb3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeChangeMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feeLastPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setFeeCollectionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee_\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"burn(address,uint256)\":{\"details\":\"only the minter can burn tokens, with the approval of the owner this is used in the process of redeeming tokens for real-world assets if the owner has not enough balance to burn + pay fees, the fee will be paid from the burn amount\",\"params\":{\"account\":\"the account to burn tokens from\",\"amount\":\"the amount of tokens to burn\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"feeLastPaid(address)\":{\"details\":\"returns 0 if the account has never had a fee deducted -> never held tokens\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(uint256)\":{\"details\":\"only the minter can mint new tokens\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeCollectionAddress(address)\":{\"details\":\"Set the address that will receive all fees collected\",\"params\":{\"newAddress\":\"The address to receive fees\"}},\"setMinterRole(address)\":{\"details\":\"Set the address that will mint new tokens\",\"params\":{\"newAddress\":\"The address to mint tokens\"}},\"setOracleAddress(address)\":{\"details\":\"Set the LockedGoldOracle address\",\"params\":{\"oracleAddress\":\"The address for oracle\"},\"returns\":{\"_0\":\"An bool representing successfully changing oracle address\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferAll(address)\":{\"details\":\"Utility function to transfer all tokens from the owner to another, taking into account the owed fees so the balance of the owner will be 0 after the transfer.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"shows the amount of tokens that are available to be transferred, after fees are deducted\"},\"balanceOfWithFee(address)\":{\"notice\":\"See {IERC20-balanceOf}.\"},\"burn(address,uint256)\":{\"notice\":\"burns tokens, meaning that less real-world assets are now represented by the token\"},\"feeLastPaid(address)\":{\"notice\":\"returns the last time the fee was deducted for the given account\"},\"mint(uint256)\":{\"notice\":\"mints new tokens into circulation, meaning that more real-world assets are now represented by the token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DSCV3.sol\":\"DSCV3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"src/DSCV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./ERC20WithFeesUpgradeable.sol\\\";\\n\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract DSCV3 is ERC20WithFeesUpgradeable, UUPSUpgradeable {\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function _authorizeUpgrade(\\n    address newImplementation\\n  ) internal override onlyOwner {}\\n\\n  function name() public pure override returns (string memory) {\\n    return \\\"Denario Silver Coin V3\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x419ea639c467e24fbcf881e862a67a1b30aafee6e19e2b9945535b16ee98ea5f\",\"license\":\"MIT\"},\"src/ERC20WithFeesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./IProofOfReserveOracle.sol\\\";\\n\\nabstract contract ERC20WithFeesUpgradeable is\\n  ContextUpgradeable,\\n  IERC20,\\n  IERC20Metadata,\\n  Ownable2StepUpgradeable\\n{\\n  event FeeChanged(uint256 newFee);\\n  event OracleAddressChanged(address oracle);\\n\\n  /// @custom:storage-location erc7201:storage.ERC20WithFeesStorage\\n  struct ERC20WithFeesStorage {\\n    mapping(address account => uint256) _balances;\\n    mapping(address account => mapping(address spender => uint256)) _allowances;\\n    uint256 _totalSupply;\\n    string _name;\\n    string _symbol;\\n    uint8 _decimals;\\n    address oracle;\\n    mapping(address => uint256) _feeLastPaid;\\n    mapping(address => bool) _feeExempt;\\n    address _feeCollectionAddress;\\n    address _minterAddress;\\n    uint256 feeRate;\\n    uint256 maxFeeDuration;\\n    uint256 lastFeeChange;\\n    uint256 maxFee;\\n    uint256 feeChangeMinDelay;\\n    uint256 feePrecision;\\n  }\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"storage.ERC20WithFeesStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant ERC20StorageLocation =\\n    0x84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400;\\n\\n  function _getERC20WithFeesStorage()\\n    private\\n    pure\\n    returns (ERC20WithFeesStorage storage $)\\n  {\\n    assembly {\\n      $.slot := ERC20StorageLocation\\n    }\\n  }\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   * All two of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  function __ERC20WithFees_init(\\n    address initialOwner,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_,\\n    uint256 feeRate_,\\n    uint256 maxFee_,\\n    uint256 delayFeeChange_,\\n    address feeCollectionAddress_,\\n    address minter_\\n  ) internal onlyInitializing {\\n    __ERC20WithFees_init_unchained(\\n      initialOwner,\\n      name_,\\n      symbol_,\\n      decimals_,\\n      feeRate_,\\n      maxFee_,\\n      delayFeeChange_,\\n      feeCollectionAddress_,\\n      minter_\\n    );\\n  }\\n\\n  function __ERC20WithFees_init_unchained(\\n    address initialOwner,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_,\\n    uint256 feeRate_,\\n    uint256 maxFee_,\\n    uint256 delayFeeChange_,\\n    address feeCollectionAddress_,\\n    address minter_\\n  ) internal onlyInitializing {\\n    __Ownable_init(initialOwner);\\n\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    require(maxFee_ <= 10 ** decimals_, \\\"ERC20WithFees: max fee too high\\\");\\n    require(\\n      feeRate_ <= maxFee_,\\n      \\\"ERC20WithFees: fee cannot be more than max fee\\\"\\n    );\\n    require(\\n      feeCollectionAddress_ != address(0),\\n      \\\"ERC20WithFees: fee collection address cannot be the zero address\\\"\\n    );\\n    require(\\n      minter_ != address(0),\\n      \\\"ERC20WithFees: minter address cannot be the zero address\\\"\\n    );\\n\\n    $._name = name_;\\n    $._symbol = symbol_;\\n    $._decimals = decimals_;\\n\\n    $.feeRate = feeRate_;\\n    $.maxFeeDuration = Math.mulDiv(10 ** decimals_, 365 days, feeRate_);\\n\\n    $.lastFeeChange = block.timestamp;\\n    $.feePrecision = 365 days * 10 ** decimals_;\\n    $.maxFee = maxFee_;\\n    $.feeChangeMinDelay = delayFeeChange_;\\n    $._feeCollectionAddress = feeCollectionAddress_;\\n    $._minterAddress = minter_;\\n\\n    setFeeExempt(feeCollectionAddress_);\\n    setFeeExempt(minter_);\\n  }\\n\\n  // IERC20 implementation\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n    return $._totalSupply;\\n  }\\n\\n  /**\\n   * @notice shows the amount of tokens that are available to be transferred, after fees are deducted\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    uint256 fee = _calculateFee(account);\\n    if ($._balances[account] < fee) {\\n      return 0;\\n    }\\n    return $._balances[account] - fee;\\n  }\\n\\n  /**\\n   * @notice See {IERC20-balanceOf}.\\n   */\\n  function balanceOfWithFee(address account) public view returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    return $._balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(\\n    address to,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    address sender = _msgSender();\\n    _transfer(sender, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(\\n    address owner,\\n    address spender\\n  ) public view virtual override returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    return $._allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    address sender = _msgSender();\\n    _approve(sender, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\n   *\\n   * NOTE: Does not update the allowance if the current allowance\\n   * is the maximum `uint256`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` and `to` cannot be the zero address.\\n   * - `from` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``from``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    address spender = _msgSender();\\n    _spendAllowance(from, spender, amount);\\n    _transfer(from, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(\\n    address spender,\\n    uint256 addedValue\\n  ) public virtual returns (bool) {\\n    address sender = _msgSender();\\n    _approve(sender, spender, allowance(sender, spender) + addedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(\\n    address spender,\\n    uint256 subtractedValue\\n  ) public virtual returns (bool) {\\n    address sender = _msgSender();\\n    uint256 currentAllowance = allowance(sender, spender);\\n    require(\\n      currentAllowance >= subtractedValue,\\n      \\\"ERC20: decreased allowance below zero\\\"\\n    );\\n    unchecked {\\n      _approve(sender, spender, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n   *\\n   * This internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {\\n    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n    require(amount > 0, \\\"ERC20: transfer amount must be greater than 0\\\");\\n    require(from != to, \\\"ERC20: self transfer is not allowed\\\");\\n\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    _payFee(from);\\n    require(\\n      $._balances[from] >= amount,\\n      \\\"ERC20: transfer amount exceeds balance\\\"\\n    );\\n    $._balances[from] = $._balances[from] - amount;\\n\\n    _payFee(to);\\n    $._balances[to] += amount;\\n\\n    emit Transfer(from, to, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    $._totalSupply += amount;\\n    $._balances[account] += amount;\\n\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    uint256 accountBalance = $._balances[account];\\n    require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n      $._balances[account] = accountBalance - amount;\\n    }\\n    $._totalSupply -= amount;\\n\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @notice mints new tokens into circulation, meaning that more real-world\\n   * assets are now represented by the token\\n   * @dev only the minter can mint new tokens\\n   */\\n  function mint(uint256 amount) public onlyMinter {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    if ($.oracle != address(0)) {\\n      uint256 reserve = IProofOfReserveOracle($.oracle).lockedValue();\\n      require(\\n        reserve >= amount + $._totalSupply,\\n        \\\"ERC20WithFees: new total supply amount would exceed reserve balance\\\"\\n      );\\n    }\\n    _mint($._minterAddress, amount);\\n  }\\n\\n  /**\\n   * @dev Utility function to transfer all tokens from the owner to another, taking into account the owed fees so the\\n   * balance of the owner will be 0 after the transfer.\\n   *\\n   */\\n  function transferAll(address to) public virtual returns (bool) {\\n    address sender = _msgSender();\\n    uint256 amount = balanceOf(sender);\\n    _transfer(sender, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice burns tokens, meaning that less real-world assets are now\\n   * represented by the token\\n   * @dev only the minter can burn tokens, with the approval of the owner\\n   * this is used in the process of redeeming tokens for real-world assets\\n   * if the owner has not enough balance to burn + pay fees, the fee will be paid from the burn amount\\n   * @param account the account to burn tokens from\\n   * @param amount the amount of tokens to burn\\n   */\\n  function burn(\\n    address account,\\n    uint256 amount\\n  ) public onlyMinter returns (uint256) {\\n    require(account != address(0), \\\"ERC20: can't burn from the zero address\\\");\\n\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    address sender = _msgSender();\\n    if (sender != account) {\\n      _spendAllowance(account, sender, amount);\\n    }\\n    uint256 paid = _payFee(account);\\n\\n    if (paid > 0 && $._balances[account] < amount) {\\n      amount = $._balances[account];\\n    }\\n\\n    _burn(account, amount);\\n    return amount;\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    $._allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n   *\\n   * Does not update the allowance amount in case of infinite allowance.\\n   * Revert if not enough allowance is available.\\n   *\\n   * Might emit an {Approval} event.\\n   */\\n  function _spendAllowance(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    uint256 currentAllowance = allowance(owner, spender);\\n    if (currentAllowance != type(uint256).max) {\\n      require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n      unchecked {\\n        _approve(owner, spender, currentAllowance - amount);\\n      }\\n    }\\n  }\\n\\n  // Token specific funtions to calculate and collect fees\\n\\n  /**\\n   * @notice returns the last time the fee was deducted for the given account\\n   * @dev returns 0 if the account has never had a fee deducted -> never held tokens\\n   */\\n  function feeLastPaid(address account) public view virtual returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    return $._feeLastPaid[account];\\n  }\\n\\n  /**\\n   * @notice returns the fees to be deducted for the given account, outstanding fees before a fee change in the contract is not included\\n   * @dev returns 0 if the account has never held tokens or is currently exempt\\n   * for the period between the last fee deduction for the account and the last fee change in the contract is not included in fee calculation\\n   */\\n  function _calculateFee(address account) internal view returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    if ($._balances[account] == 0 || $._feeExempt[account]) {\\n      return 0;\\n    }\\n    uint256 lastPaid = $._feeLastPaid[account] > $.lastFeeChange\\n      ? $._feeLastPaid[account]\\n      : $.lastFeeChange;\\n\\n    uint256 elapsed = block.timestamp - lastPaid;\\n\\n    if (elapsed >= $.maxFeeDuration) {\\n      return $._balances[account];\\n    }\\n\\n    return\\n      Math.mulDiv(elapsed * $.feeRate, $._balances[account], $.feePrecision);\\n  }\\n\\n  function _payFee(address account) internal returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    uint256 fee = _calculateFee(account);\\n    if (fee > 0) {\\n      $._balances[account] -= fee;\\n      $._balances[$._feeCollectionAddress] += fee;\\n      emit Transfer(account, $._feeCollectionAddress, fee);\\n    }\\n    $._feeLastPaid[account] = block.timestamp;\\n\\n    return fee;\\n  }\\n\\n  function setFeeRate(uint256 newFee_) public onlyOwner {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    require(\\n      newFee_ <= $.maxFee,\\n      \\\"ERC20WithFees: fee cannot be more than max fee\\\"\\n    );\\n    require(\\n      block.timestamp - $.lastFeeChange > $.feeChangeMinDelay,\\n      \\\"ERC20WithFees: fee change delay not passed\\\"\\n    );\\n\\n    $.lastFeeChange = block.timestamp;\\n    $.feeRate = newFee_;\\n    $.maxFeeDuration = Math.mulDiv(10 ** $._decimals, 365 days, $.feeRate);\\n\\n    emit FeeChanged($.feeRate);\\n  }\\n\\n  function collectFees(address[] calldata accounts) public {\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      _payFee(accounts[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Set this account as being exempt from storage fees. This may be used\\n   * in special circumstance for cold storage addresses owed by Cache, exchanges, etc.\\n   * @param account The account to exempt from storage fees\\n   */\\n  function setFeeExempt(address account) internal onlyOwner {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    $._feeExempt[account] = true;\\n  }\\n\\n  /**\\n   * @dev Set account is no longer exempt from all fees\\n   * @param account The account to reactivate fees\\n   */\\n  function unsetFeeExempt(address account) internal onlyOwner {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    $._feeExempt[account] = false;\\n    $._feeLastPaid[account] = block.timestamp;\\n  }\\n\\n  /**\\n   * @dev Set the address that will receive all fees collected\\n   * @param newAddress The address to receive fees\\n   */\\n\\n  function setFeeCollectionAddress(address newAddress) public onlyOwner {\\n    require(\\n      newAddress != address(0),\\n      \\\"ERC20WithFees: collection address cannot be zero\\\"\\n    );\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    unsetFeeExempt($._feeCollectionAddress);\\n    $._feeCollectionAddress = newAddress;\\n    setFeeExempt(newAddress);\\n  }\\n\\n  /**\\n   * @dev Set the address that will mint new tokens\\n   * @param newAddress The address to mint tokens\\n   */\\n  function setMinterRole(address newAddress) public onlyOwner {\\n    require(\\n      newAddress != address(0),\\n      \\\"ERC20WithFees: collection address cannot be zero\\\"\\n    );\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    unsetFeeExempt($._minterAddress);\\n    $._minterAddress = newAddress;\\n    setFeeExempt(newAddress);\\n  }\\n\\n  /**\\n   * @dev Set the LockedGoldOracle address\\n   * @param oracleAddress The address for oracle\\n   * @return An bool representing successfully changing oracle address\\n   */\\n  function setOracleAddress(\\n    address oracleAddress\\n  ) external onlyOwner returns (bool) {\\n    require(\\n      oracleAddress != address(0),\\n      \\\"ERC20WithFees: oracle address cannot be zero\\\"\\n    );\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    $.oracle = oracleAddress;\\n    emit OracleAddressChanged(oracleAddress);\\n    return true;\\n  }\\n\\n  function decimals() public view virtual override returns (uint8) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n    return $._decimals;\\n  }\\n\\n  function name() public view virtual override returns (string memory) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n    return $._name;\\n  }\\n\\n  function symbol() public view virtual override returns (string memory) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n    return $._symbol;\\n  }\\n\\n  function feeRate() public view returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n    return $.feeRate;\\n  }\\n\\n  function maxFee() public view returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n    return $.maxFee;\\n  }\\n\\n  function lastFeeChange() public view returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n    return $.lastFeeChange;\\n  }\\n\\n  function feeChangeMinDelay() public view returns (uint256) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n    return $.feeChangeMinDelay;\\n  }\\n\\n  function oracle() public view returns (address) {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n    return $.oracle;\\n  }\\n\\n  /*\\n   * @dev Throws if called by any account other than the MINTER.\\n   */\\n  modifier onlyMinter() {\\n    ERC20WithFeesStorage storage $ = _getERC20WithFeesStorage();\\n\\n    require(\\n      msg.sender == $._minterAddress,\\n      \\\"ERC20WithFees: only minter can call this function\\\"\\n    );\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0151e43683f0ee1a72d561dd23894eaac1c42e319b3e6276dc3b25acd76ed850\",\"license\":\"MIT\"},\"src/IProofOfReserveOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\ninterface IProofOfReserveOracle {\\n    function lockedValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xac40ea5999fb63d7e24d6cb2fdcd00ceb6cb2b102780a4ab9d58a93aa5fe9bfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000da565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000775760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051612f556200011260003960008181610813015281816108ae01528181610d1201528181610da80152610ea30152612f556000f3fe6080604052600436106102195760003560e01c8063715018a61161011d578063a0712d68116100b0578063b8cc76fb1161007f578063dd62ed3e11610064578063dd62ed3e1461072f578063e30c397814610794578063f2fde38b146107a957600080fd5b8063b8cc76fb146106ba578063ceee577e146106da57600080fd5b8063a0712d681461063a578063a3a7e7f31461065a578063a457c2d71461067a578063a9059cbb1461069a57600080fd5b8063945d1229116100ec578063945d1229146105b157806395d89b41146105d1578063978bbdb9146105e65780639dc29fac1461061a57600080fd5b8063715018a61461051c57806379ba5097146105315780637dc0d1d0146105465780638da5cb5b1461059c57600080fd5b806339509351116101b05780634f1ef2861161017f57806358c0f7291161016457806358c0f729146104a857806369505688146104c857806370a08231146104fc57600080fd5b80634f1ef2861461048057806352d1902d1461049357600080fd5b806339509351146103cb57806345596e2e146103eb5780634bcc1aef1461040b5780634c69c00f1461046057600080fd5b806318160ddd116101ec57806318160ddd1461031457806323b872dd14610348578063313ce567146103685780633659cfe6146103a957600080fd5b806301f59d161461021e57806306fdde0314610261578063095ea7b3146102b0578063142a1515146102e0575b600080fd5b34801561022a57600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540d545b6040519081526020015b60405180910390f35b34801561026d57600080fd5b5060408051808201909152601681527f44656e6172696f2053696c76657220436f696e2056330000000000000000000060208201525b6040516102589190612a99565b3480156102bc57600080fd5b506102d06102cb366004612ae3565b6107c9565b6040519015158152602001610258565b3480156102ec57600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540e5461024e565b34801561032057600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054025461024e565b34801561035457600080fd5b506102d0610363366004612b0d565b6107e3565b34801561037457600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054055460405160ff9091168152602001610258565b3480156103b557600080fd5b506103c96103c4366004612b49565b610809565b005b3480156103d757600080fd5b506102d06103e6366004612ae3565b6109ab565b3480156103f757600080fd5b506103c9610406366004612b64565b610a09565b34801561041757600080fd5b5061024e610426366004612b49565b6001600160a01b031660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400602052604090205490565b34801561046c57600080fd5b506102d061047b366004612b49565b610bc5565b6103c961048e366004612b93565b610d08565b34801561049f57600080fd5b5061024e610e96565b3480156104b457600080fd5b506103c96104c3366004612c55565b610f5b565b3480156104d457600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540c5461024e565b34801561050857600080fd5b5061024e610517366004612b49565b610fad565b34801561052857600080fd5b506103c9611033565b34801561053d57600080fd5b506103c9611047565b34801561055257600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054055461010090046001600160a01b03165b6040516001600160a01b039091168152602001610258565b3480156105a857600080fd5b506105846110a5565b3480156105bd57600080fd5b506103c96105cc366004612b49565b6110da565b3480156105dd57600080fd5b506102a36111e7565b3480156105f257600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540a5461024e565b34801561062657600080fd5b5061024e610635366004612ae3565b6112bc565b34801561064657600080fd5b506103c9610655366004612b64565b6114a3565b34801561066657600080fd5b506102d0610675366004612b49565b6116fd565b34801561068657600080fd5b506102d0610695366004612ae3565b611721565b3480156106a657600080fd5b506102d06106b5366004612ae3565b6117f5565b3480156106c657600080fd5b506103c96106d5366004612b49565b611803565b3480156106e657600080fd5b5061024e6106f5366004612b49565b6001600160a01b031660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05406602052604090205490565b34801561073b57600080fd5b5061024e61074a366004612cca565b6001600160a01b0391821660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054016020908152604080832093909416825291909152205490565b3480156107a057600080fd5b50610584611910565b3480156107b557600080fd5b506103c96107c4366004612b49565b611939565b6000336107d78185856119cb565b60019150505b92915050565b6000336107f1858285611b68565b6107fc858585611c19565b60019150505b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108ac5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109077f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109835760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016108a3565b61098c81611f82565b604080516000808252602082019092526109a891839190611f8a565b50565b3360008181527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05401602090815260408083206001600160a01b03871684529091528120549091906107d79082908690610a04908790612d13565b6119cb565b610a1161212a565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540d547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540090821115610aca5760405162461bcd60e51b815260206004820152602e60248201527f455243323057697468466565733a206665652063616e6e6f74206265206d6f7260448201527f65207468616e206d61782066656500000000000000000000000000000000000060648201526084016108a3565b600e810154600c820154610ade9042612d26565b11610b515760405162461bcd60e51b815260206004820152602a60248201527f455243323057697468466565733a20666565206368616e67652064656c61792060448201527f6e6f74207061737365640000000000000000000000000000000000000000000060648201526084016108a3565b42600c820155600a8082018390556005820154610b8491610b759160ff1690612e1d565b6301e1338083600a0154612175565b600b820155600a8101546040519081527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c39060200160405180910390a15050565b6000610bcf61212a565b6001600160a01b038216610c4b5760405162461bcd60e51b815260206004820152602c60248201527f455243323057697468466565733a206f7261636c65206164647265737320636160448201527f6e6e6f74206265207a65726f000000000000000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540580546001600160a01b03841661010081027fffffffffffffffffffffff0000000000000000000000000000000000000000ff9092169190911790915560408051918252517f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400917fe420b96152542f57ce3d2d26d939a3c2860a82361801ad0a970a3badc32d538e919081900360200190a160019150505b919050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610da65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016108a3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610e7d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016108a3565b610e8682611f82565b610e9282826001611f8a565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f365760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108a3565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60005b81811015610fa857610f95838383818110610f7b57610f7b612e2c565b9050602002016020810190610f909190612b49565b612267565b5080610fa081612e42565b915050610f5e565b505050565b60007f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540081610fda84612365565b6001600160a01b038516600090815260208490526040902054909150811115611007575060009392505050565b6001600160a01b03841660009081526020839052604090205461102b908290612d26565b949350505050565b61103b61212a565b611045600061249b565b565b3380611051611910565b6001600160a01b03161461109c576040517f118cdaa70000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024016108a3565b6109a88161249b565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b6110e261212a565b6001600160a01b03811661115e5760405162461bcd60e51b815260206004820152603060248201527f455243323057697468466565733a20636f6c6c656374696f6e2061646472657360448201527f732063616e6e6f74206265207a65726f0000000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05409547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400906111b4906001600160a01b03166124e0565b60098101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055610e9282612554565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540480546060917f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054009161123890612e5c565b80601f016020809104026020016040519081016040528092919081815260200182805461126490612e5c565b80156112b15780601f10611286576101008083540402835291602001916112b1565b820191906000526020600020905b81548152906001019060200180831161129457829003601f168201915b505050505091505090565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05409546000907f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400906001600160a01b031633146113805760405162461bcd60e51b815260206004820152603160248201527f455243323057697468466565733a206f6e6c79206d696e7465722063616e206360448201527f616c6c20746869732066756e6374696f6e00000000000000000000000000000060648201526084016108a3565b6001600160a01b0384166113fc5760405162461bcd60e51b815260206004820152602760248201527f45524332303a2063616e2774206275726e2066726f6d20746865207a65726f2060448201527f616464726573730000000000000000000000000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400336001600160a01b038616811461143957611439868287611b68565b600061144487612267565b905060008111801561146d57506001600160a01b03871660009081526020849052604090205486115b1561148e576001600160a01b03871660009081526020849052604090205495505b611498878761259f565b509395945050505050565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05409547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400906001600160a01b031633146115645760405162461bcd60e51b815260206004820152603160248201527f455243323057697468466565733a206f6e6c79206d696e7465722063616e206360448201527f616c6c20746869732066756e6374696f6e00000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05405547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054009061010090046001600160a01b0316156116e55760008160050160019054906101000a90046001600160a01b03166001600160a01b031663d2c469326040518163ffffffff1660e01b8152600401602060405180830381865afa158015611612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116369190612e96565b90508160020154846116489190612d13565b8110156116e35760405162461bcd60e51b815260206004820152604360248201527f455243323057697468466565733a206e657720746f74616c20737570706c792060448201527f616d6f756e7420776f756c642065786365656420726573657276652062616c6160648201527f6e63650000000000000000000000000000000000000000000000000000000000608482015260a4016108a3565b505b6009810154610fa8906001600160a01b0316846126c4565b6000338161170a82610fad565b9050611717828583611c19565b5060019392505050565b3360008181527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05401602090815260408083206001600160a01b0387168452909152812054909190838110156117dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016108a3565b6117ea82868684036119cb565b506001949350505050565b6000336107d7818585611c19565b61180b61212a565b6001600160a01b0381166118875760405162461bcd60e51b815260206004820152603060248201527f455243323057697468466565733a20636f6c6c656374696f6e2061646472657360448201527f732063616e6e6f74206265207a65726f0000000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05408547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400906118dd906001600160a01b03166124e0565b60088101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055610e9282612554565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c006110ca565b61194161212a565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556119926110a5565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b6001600160a01b038316611a465760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016108a3565b6001600160a01b038216611ac25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016108a3565b6001600160a01b0383811660008181527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05401602090815260408083209487168084529482529182902085905590518481527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054009392917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a350505050565b6001600160a01b0383811660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540160209081526040808320938616835292905220546000198114611c135781811015611c065760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016108a3565b611c1384848484036119cb565b50505050565b6001600160a01b038316611c955760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016108a3565b6001600160a01b038216611d115760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016108a3565b60008111611d875760405162461bcd60e51b815260206004820152602d60248201527f45524332303a207472616e7366657220616d6f756e74206d757374206265206760448201527f726561746572207468616e20300000000000000000000000000000000000000060648201526084016108a3565b816001600160a01b0316836001600160a01b031603611e0e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a2073656c66207472616e73666572206973206e6f7420616c6c6f60448201527f776564000000000000000000000000000000000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400611e3884612267565b506001600160a01b038416600090815260208290526040902054821115611ec75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016108a3565b6001600160a01b038416600090815260208290526040902054611eeb908390612d26565b6001600160a01b038516600090815260208390526040902055611f0d83612267565b506001600160a01b03831660009081526020829052604081208054849290611f36908490612d13565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b5a91815260200190565b6109a861212a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611fbd57610fa883612791565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612017575060408051601f3d908101601f1916820190925261201491810190612e96565b60015b6120895760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016108a3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461211e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016108a3565b50610fa883838361285c565b336121336110a5565b6001600160a01b031614611045576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016108a3565b60008080600019858709858702925082811083820303915050806000036121af578382816121a5576121a5612eaf565b0492505050610802565b8084116121fe5760405162461bcd60e51b815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f77000000000000000000000060448201526064016108a3565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60007f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054008161229484612365565b90508015612342576001600160a01b038416600090815260208390526040812080548392906122c4908490612d26565b909155505060088201546001600160a01b0316600090815260208390526040812080548392906122f5908490612d13565b909155505060088201546040518281526001600160a01b03918216918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b6001600160a01b0390931660009081526006909101602052604090204290555090565b6001600160a01b03811660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054006020819052604082205415806123c557506001600160a01b038316600090815260078201602052604090205460ff165b156123d35750600092915050565b600c8101546001600160a01b03841660009081526006830160205260408120549091106124045781600c0154612420565b6001600160a01b03841660009081526006830160205260409020545b9050600061242e8242612d26565b905082600b0154811061245c5750506001600160a01b03909216600090815260209290925250604090205490565b61249283600a01548261246f9190612ec5565b6001600160a01b038716600090815260208690526040902054600f860154612175565b95945050505050565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00805473ffffffffffffffffffffffffffffffffffffffff19168155610e9282612881565b6124e861212a565b6001600160a01b031660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540760209081526040808320805460ff191690557f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054069091529020429055565b61255c61212a565b6001600160a01b031660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540760205260409020805460ff19166001179055565b6001600160a01b03821660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054006020819052604090912054828110156126505760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016108a3565b6001600160a01b03841660009081526020839052604081208483039055600283018054859290612681908490612d26565b90915550506040518381526000906001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611b5a565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540280547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400918391600090612719908490612d13565b90915550506001600160a01b03831660009081526020829052604081208054849290612746908490612d13565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b0381163b61280e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016108a3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b612865836128ff565b6000825111806128725750805b15610fa857611c13838361293f565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61290881612791565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606108028383604051806060016040528060278152602001612ef9602791396060600080856001600160a01b03168560405161297c9190612edc565b600060405180830381855af49150503d80600081146129b7576040519150601f19603f3d011682016040523d82523d6000602084013e6129bc565b606091505b50915091506129cd868383876129d7565b9695505050505050565b60608315612a46578251600003612a3f576001600160a01b0385163b612a3f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108a3565b508161102b565b61102b8383815115612a5b5781518083602001fd5b8060405162461bcd60e51b81526004016108a39190612a99565b60005b83811015612a90578181015183820152602001612a78565b50506000910152565b6020815260008251806020840152612ab8816040850160208701612a75565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610d0357600080fd5b60008060408385031215612af657600080fd5b612aff83612acc565b946020939093013593505050565b600080600060608486031215612b2257600080fd5b612b2b84612acc565b9250612b3960208501612acc565b9150604084013590509250925092565b600060208284031215612b5b57600080fd5b61080282612acc565b600060208284031215612b7657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612ba657600080fd5b612baf83612acc565b9150602083013567ffffffffffffffff80821115612bcc57600080fd5b818501915085601f830112612be057600080fd5b813581811115612bf257612bf2612b7d565b604051601f8201601f19908116603f01168101908382118183101715612c1a57612c1a612b7d565b81604052828152886020848701011115612c3357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060208385031215612c6857600080fd5b823567ffffffffffffffff80821115612c8057600080fd5b818501915085601f830112612c9457600080fd5b813581811115612ca357600080fd5b8660208260051b8501011115612cb857600080fd5b60209290920196919550909350505050565b60008060408385031215612cdd57600080fd5b612ce683612acc565b9150612cf460208401612acc565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b808201808211156107dd576107dd612cfd565b818103818111156107dd576107dd612cfd565b600181815b80851115612d74578160001904821115612d5a57612d5a612cfd565b80851615612d6757918102915b93841c9390800290612d3e565b509250929050565b600082612d8b575060016107dd565b81612d98575060006107dd565b8160018114612dae5760028114612db857612dd4565b60019150506107dd565b60ff841115612dc957612dc9612cfd565b50506001821b6107dd565b5060208310610133831016604e8410600b8410161715612df7575081810a6107dd565b612e018383612d39565b8060001904821115612e1557612e15612cfd565b029392505050565b600061080260ff841683612d7c565b634e487b7160e01b600052603260045260246000fd5b60006000198203612e5557612e55612cfd565b5060010190565b600181811c90821680612e7057607f821691505b602082108103612e9057634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612ea857600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b80820281158282048414176107dd576107dd612cfd565b60008251612eee818460208701612a75565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209f9bb504fe1510f37d11a628bb067e41bb46be685224e09055de05ad07e736c464736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102195760003560e01c8063715018a61161011d578063a0712d68116100b0578063b8cc76fb1161007f578063dd62ed3e11610064578063dd62ed3e1461072f578063e30c397814610794578063f2fde38b146107a957600080fd5b8063b8cc76fb146106ba578063ceee577e146106da57600080fd5b8063a0712d681461063a578063a3a7e7f31461065a578063a457c2d71461067a578063a9059cbb1461069a57600080fd5b8063945d1229116100ec578063945d1229146105b157806395d89b41146105d1578063978bbdb9146105e65780639dc29fac1461061a57600080fd5b8063715018a61461051c57806379ba5097146105315780637dc0d1d0146105465780638da5cb5b1461059c57600080fd5b806339509351116101b05780634f1ef2861161017f57806358c0f7291161016457806358c0f729146104a857806369505688146104c857806370a08231146104fc57600080fd5b80634f1ef2861461048057806352d1902d1461049357600080fd5b806339509351146103cb57806345596e2e146103eb5780634bcc1aef1461040b5780634c69c00f1461046057600080fd5b806318160ddd116101ec57806318160ddd1461031457806323b872dd14610348578063313ce567146103685780633659cfe6146103a957600080fd5b806301f59d161461021e57806306fdde0314610261578063095ea7b3146102b0578063142a1515146102e0575b600080fd5b34801561022a57600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540d545b6040519081526020015b60405180910390f35b34801561026d57600080fd5b5060408051808201909152601681527f44656e6172696f2053696c76657220436f696e2056330000000000000000000060208201525b6040516102589190612a99565b3480156102bc57600080fd5b506102d06102cb366004612ae3565b6107c9565b6040519015158152602001610258565b3480156102ec57600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540e5461024e565b34801561032057600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054025461024e565b34801561035457600080fd5b506102d0610363366004612b0d565b6107e3565b34801561037457600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054055460405160ff9091168152602001610258565b3480156103b557600080fd5b506103c96103c4366004612b49565b610809565b005b3480156103d757600080fd5b506102d06103e6366004612ae3565b6109ab565b3480156103f757600080fd5b506103c9610406366004612b64565b610a09565b34801561041757600080fd5b5061024e610426366004612b49565b6001600160a01b031660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400602052604090205490565b34801561046c57600080fd5b506102d061047b366004612b49565b610bc5565b6103c961048e366004612b93565b610d08565b34801561049f57600080fd5b5061024e610e96565b3480156104b457600080fd5b506103c96104c3366004612c55565b610f5b565b3480156104d457600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540c5461024e565b34801561050857600080fd5b5061024e610517366004612b49565b610fad565b34801561052857600080fd5b506103c9611033565b34801561053d57600080fd5b506103c9611047565b34801561055257600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054055461010090046001600160a01b03165b6040516001600160a01b039091168152602001610258565b3480156105a857600080fd5b506105846110a5565b3480156105bd57600080fd5b506103c96105cc366004612b49565b6110da565b3480156105dd57600080fd5b506102a36111e7565b3480156105f257600080fd5b507f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540a5461024e565b34801561062657600080fd5b5061024e610635366004612ae3565b6112bc565b34801561064657600080fd5b506103c9610655366004612b64565b6114a3565b34801561066657600080fd5b506102d0610675366004612b49565b6116fd565b34801561068657600080fd5b506102d0610695366004612ae3565b611721565b3480156106a657600080fd5b506102d06106b5366004612ae3565b6117f5565b3480156106c657600080fd5b506103c96106d5366004612b49565b611803565b3480156106e657600080fd5b5061024e6106f5366004612b49565b6001600160a01b031660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05406602052604090205490565b34801561073b57600080fd5b5061024e61074a366004612cca565b6001600160a01b0391821660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054016020908152604080832093909416825291909152205490565b3480156107a057600080fd5b50610584611910565b3480156107b557600080fd5b506103c96107c4366004612b49565b611939565b6000336107d78185856119cb565b60019150505b92915050565b6000336107f1858285611b68565b6107fc858585611c19565b60019150505b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108ac5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109077f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109835760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016108a3565b61098c81611f82565b604080516000808252602082019092526109a891839190611f8a565b50565b3360008181527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05401602090815260408083206001600160a01b03871684529091528120549091906107d79082908690610a04908790612d13565b6119cb565b610a1161212a565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540d547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540090821115610aca5760405162461bcd60e51b815260206004820152602e60248201527f455243323057697468466565733a206665652063616e6e6f74206265206d6f7260448201527f65207468616e206d61782066656500000000000000000000000000000000000060648201526084016108a3565b600e810154600c820154610ade9042612d26565b11610b515760405162461bcd60e51b815260206004820152602a60248201527f455243323057697468466565733a20666565206368616e67652064656c61792060448201527f6e6f74207061737365640000000000000000000000000000000000000000000060648201526084016108a3565b42600c820155600a8082018390556005820154610b8491610b759160ff1690612e1d565b6301e1338083600a0154612175565b600b820155600a8101546040519081527f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c39060200160405180910390a15050565b6000610bcf61212a565b6001600160a01b038216610c4b5760405162461bcd60e51b815260206004820152602c60248201527f455243323057697468466565733a206f7261636c65206164647265737320636160448201527f6e6e6f74206265207a65726f000000000000000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540580546001600160a01b03841661010081027fffffffffffffffffffffff0000000000000000000000000000000000000000ff9092169190911790915560408051918252517f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400917fe420b96152542f57ce3d2d26d939a3c2860a82361801ad0a970a3badc32d538e919081900360200190a160019150505b919050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610da65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084016108a3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610e7d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f7879000000000000000000000000000000000000000060648201526084016108a3565b610e8682611f82565b610e9282826001611f8a565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f365760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108a3565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60005b81811015610fa857610f95838383818110610f7b57610f7b612e2c565b9050602002016020810190610f909190612b49565b612267565b5080610fa081612e42565b915050610f5e565b505050565b60007f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540081610fda84612365565b6001600160a01b038516600090815260208490526040902054909150811115611007575060009392505050565b6001600160a01b03841660009081526020839052604090205461102b908290612d26565b949350505050565b61103b61212a565b611045600061249b565b565b3380611051611910565b6001600160a01b03161461109c576040517f118cdaa70000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024016108a3565b6109a88161249b565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b6110e261212a565b6001600160a01b03811661115e5760405162461bcd60e51b815260206004820152603060248201527f455243323057697468466565733a20636f6c6c656374696f6e2061646472657360448201527f732063616e6e6f74206265207a65726f0000000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05409547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400906111b4906001600160a01b03166124e0565b60098101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055610e9282612554565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540480546060917f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054009161123890612e5c565b80601f016020809104026020016040519081016040528092919081815260200182805461126490612e5c565b80156112b15780601f10611286576101008083540402835291602001916112b1565b820191906000526020600020905b81548152906001019060200180831161129457829003601f168201915b505050505091505090565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05409546000907f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400906001600160a01b031633146113805760405162461bcd60e51b815260206004820152603160248201527f455243323057697468466565733a206f6e6c79206d696e7465722063616e206360448201527f616c6c20746869732066756e6374696f6e00000000000000000000000000000060648201526084016108a3565b6001600160a01b0384166113fc5760405162461bcd60e51b815260206004820152602760248201527f45524332303a2063616e2774206275726e2066726f6d20746865207a65726f2060448201527f616464726573730000000000000000000000000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400336001600160a01b038616811461143957611439868287611b68565b600061144487612267565b905060008111801561146d57506001600160a01b03871660009081526020849052604090205486115b1561148e576001600160a01b03871660009081526020849052604090205495505b611498878761259f565b509395945050505050565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05409547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400906001600160a01b031633146115645760405162461bcd60e51b815260206004820152603160248201527f455243323057697468466565733a206f6e6c79206d696e7465722063616e206360448201527f616c6c20746869732066756e6374696f6e00000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05405547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054009061010090046001600160a01b0316156116e55760008160050160019054906101000a90046001600160a01b03166001600160a01b031663d2c469326040518163ffffffff1660e01b8152600401602060405180830381865afa158015611612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116369190612e96565b90508160020154846116489190612d13565b8110156116e35760405162461bcd60e51b815260206004820152604360248201527f455243323057697468466565733a206e657720746f74616c20737570706c792060448201527f616d6f756e7420776f756c642065786365656420726573657276652062616c6160648201527f6e63650000000000000000000000000000000000000000000000000000000000608482015260a4016108a3565b505b6009810154610fa8906001600160a01b0316846126c4565b6000338161170a82610fad565b9050611717828583611c19565b5060019392505050565b3360008181527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05401602090815260408083206001600160a01b0387168452909152812054909190838110156117dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016108a3565b6117ea82868684036119cb565b506001949350505050565b6000336107d7818585611c19565b61180b61212a565b6001600160a01b0381166118875760405162461bcd60e51b815260206004820152603060248201527f455243323057697468466565733a20636f6c6c656374696f6e2061646472657360448201527f732063616e6e6f74206265207a65726f0000000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05408547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400906118dd906001600160a01b03166124e0565b60088101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055610e9282612554565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c006110ca565b61194161212a565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03831690811782556119926110a5565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b6001600160a01b038316611a465760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016108a3565b6001600160a01b038216611ac25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016108a3565b6001600160a01b0383811660008181527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05401602090815260408083209487168084529482529182902085905590518481527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054009392917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a350505050565b6001600160a01b0383811660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540160209081526040808320938616835292905220546000198114611c135781811015611c065760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016108a3565b611c1384848484036119cb565b50505050565b6001600160a01b038316611c955760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016108a3565b6001600160a01b038216611d115760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016108a3565b60008111611d875760405162461bcd60e51b815260206004820152602d60248201527f45524332303a207472616e7366657220616d6f756e74206d757374206265206760448201527f726561746572207468616e20300000000000000000000000000000000000000060648201526084016108a3565b816001600160a01b0316836001600160a01b031603611e0e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a2073656c66207472616e73666572206973206e6f7420616c6c6f60448201527f776564000000000000000000000000000000000000000000000000000000000060648201526084016108a3565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400611e3884612267565b506001600160a01b038416600090815260208290526040902054821115611ec75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016108a3565b6001600160a01b038416600090815260208290526040902054611eeb908390612d26565b6001600160a01b038516600090815260208390526040902055611f0d83612267565b506001600160a01b03831660009081526020829052604081208054849290611f36908490612d13565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b5a91815260200190565b6109a861212a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611fbd57610fa883612791565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612017575060408051601f3d908101601f1916820190925261201491810190612e96565b60015b6120895760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f74205555505300000000000000000000000000000000000060648201526084016108a3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461211e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c6555554944000000000000000000000000000000000000000000000060648201526084016108a3565b50610fa883838361285c565b336121336110a5565b6001600160a01b031614611045576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016108a3565b60008080600019858709858702925082811083820303915050806000036121af578382816121a5576121a5612eaf565b0492505050610802565b8084116121fe5760405162461bcd60e51b815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f77000000000000000000000060448201526064016108a3565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60007f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054008161229484612365565b90508015612342576001600160a01b038416600090815260208390526040812080548392906122c4908490612d26565b909155505060088201546001600160a01b0316600090815260208390526040812080548392906122f5908490612d13565b909155505060088201546040518281526001600160a01b03918216918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b6001600160a01b0390931660009081526006909101602052604090204290555090565b6001600160a01b03811660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054006020819052604082205415806123c557506001600160a01b038316600090815260078201602052604090205460ff165b156123d35750600092915050565b600c8101546001600160a01b03841660009081526006830160205260408120549091106124045781600c0154612420565b6001600160a01b03841660009081526006830160205260409020545b9050600061242e8242612d26565b905082600b0154811061245c5750506001600160a01b03909216600090815260209290925250604090205490565b61249283600a01548261246f9190612ec5565b6001600160a01b038716600090815260208690526040902054600f860154612175565b95945050505050565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00805473ffffffffffffffffffffffffffffffffffffffff19168155610e9282612881565b6124e861212a565b6001600160a01b031660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540760209081526040808320805460ff191690557f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054069091529020429055565b61255c61212a565b6001600160a01b031660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540760205260409020805460ff19166001179055565b6001600160a01b03821660009081527f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea054006020819052604090912054828110156126505760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016108a3565b6001600160a01b03841660009081526020839052604081208483039055600283018054859290612681908490612d26565b90915550506040518381526000906001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611b5a565b7f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea0540280547f84f93370f668d60ff19344e905d5e5ea70bb94f6b70992c58975d1579ea05400918391600090612719908490612d13565b90915550506001600160a01b03831660009081526020829052604081208054849290612746908490612d13565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b0381163b61280e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016108a3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b612865836128ff565b6000825111806128725750805b15610fa857611c13838361293f565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61290881612791565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606108028383604051806060016040528060278152602001612ef9602791396060600080856001600160a01b03168560405161297c9190612edc565b600060405180830381855af49150503d80600081146129b7576040519150601f19603f3d011682016040523d82523d6000602084013e6129bc565b606091505b50915091506129cd868383876129d7565b9695505050505050565b60608315612a46578251600003612a3f576001600160a01b0385163b612a3f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108a3565b508161102b565b61102b8383815115612a5b5781518083602001fd5b8060405162461bcd60e51b81526004016108a39190612a99565b60005b83811015612a90578181015183820152602001612a78565b50506000910152565b6020815260008251806020840152612ab8816040850160208701612a75565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610d0357600080fd5b60008060408385031215612af657600080fd5b612aff83612acc565b946020939093013593505050565b600080600060608486031215612b2257600080fd5b612b2b84612acc565b9250612b3960208501612acc565b9150604084013590509250925092565b600060208284031215612b5b57600080fd5b61080282612acc565b600060208284031215612b7657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612ba657600080fd5b612baf83612acc565b9150602083013567ffffffffffffffff80821115612bcc57600080fd5b818501915085601f830112612be057600080fd5b813581811115612bf257612bf2612b7d565b604051601f8201601f19908116603f01168101908382118183101715612c1a57612c1a612b7d565b81604052828152886020848701011115612c3357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060208385031215612c6857600080fd5b823567ffffffffffffffff80821115612c8057600080fd5b818501915085601f830112612c9457600080fd5b813581811115612ca357600080fd5b8660208260051b8501011115612cb857600080fd5b60209290920196919550909350505050565b60008060408385031215612cdd57600080fd5b612ce683612acc565b9150612cf460208401612acc565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b808201808211156107dd576107dd612cfd565b818103818111156107dd576107dd612cfd565b600181815b80851115612d74578160001904821115612d5a57612d5a612cfd565b80851615612d6757918102915b93841c9390800290612d3e565b509250929050565b600082612d8b575060016107dd565b81612d98575060006107dd565b8160018114612dae5760028114612db857612dd4565b60019150506107dd565b60ff841115612dc957612dc9612cfd565b50506001821b6107dd565b5060208310610133831016604e8410600b8410161715612df7575081810a6107dd565b612e018383612d39565b8060001904821115612e1557612e15612cfd565b029392505050565b600061080260ff841683612d7c565b634e487b7160e01b600052603260045260246000fd5b60006000198203612e5557612e55612cfd565b5060010190565b600181811c90821680612e7057607f821691505b602082108103612e9057634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612ea857600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b80820281158282048414176107dd576107dd612cfd565b60008251612eee818460208701612a75565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209f9bb504fe1510f37d11a628bb067e41bb46be685224e09055de05ad07e736c464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "burn(address,uint256)": {
        "details": "only the minter can burn tokens, with the approval of the owner this is used in the process of redeeming tokens for real-world assets if the owner has not enough balance to burn + pay fees, the fee will be paid from the burn amount",
        "params": {
          "account": "the account to burn tokens from",
          "amount": "the amount of tokens to burn"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "decimals()": {
        "details": "Returns the decimals places of the token."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "feeLastPaid(address)": {
        "details": "returns 0 if the account has never had a fee deducted -> never held tokens"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(uint256)": {
        "details": "only the minter can mint new tokens"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFeeCollectionAddress(address)": {
        "details": "Set the address that will receive all fees collected",
        "params": {
          "newAddress": "The address to receive fees"
        }
      },
      "setMinterRole(address)": {
        "details": "Set the address that will mint new tokens",
        "params": {
          "newAddress": "The address to mint tokens"
        }
      },
      "setOracleAddress(address)": {
        "details": "Set the LockedGoldOracle address",
        "params": {
          "oracleAddress": "The address for oracle"
        },
        "returns": {
          "_0": "An bool representing successfully changing oracle address"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferAll(address)": {
        "details": "Utility function to transfer all tokens from the owner to another, taking into account the owed fees so the balance of the owner will be 0 after the transfer."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "shows the amount of tokens that are available to be transferred, after fees are deducted"
      },
      "balanceOfWithFee(address)": {
        "notice": "See {IERC20-balanceOf}."
      },
      "burn(address,uint256)": {
        "notice": "burns tokens, meaning that less real-world assets are now represented by the token"
      },
      "feeLastPaid(address)": {
        "notice": "returns the last time the fee was deducted for the given account"
      },
      "mint(uint256)": {
        "notice": "mints new tokens into circulation, meaning that more real-world assets are now represented by the token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}